name: Build and publish wheels

on:
  push:
    tags:
      - "v*.*.*"  # Only run on version tags like v0.1.0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']  # Supported Python versions

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install maturin
        run: |
          python -m pip install --upgrade pip
          pip install maturin

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt

      - name: Publish to PyPI on macOS and Linux
        if: runner.os != 'Windows'
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          maturin publish --skip-existing --username __token__

      - name: Publish to PyPI on Windows
        if: runner.os == 'Windows'
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          # Install Visual Studio Build Tools for Rust on Windows
          choco install visualstudio2019buildtools --version=16.11.7
          maturin publish --skip-existing --username __token__

  build-arm:
    runs-on: ubuntu-latest
    needs: build  # This ensures the ARM build runs after the main build
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']  # Supported Python versions

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'  # Use any supported version

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.16.2

      - name: Build wheels
        env:
          CIBW_ARCHS_LINUX: aarch64
          CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- -y && source $HOME/.cargo/env && rustup target add aarch64-unknown-linux-gnu"
          CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH" CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER="aarch64-linux-gnu-gcc"'
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./wheelhouse/*.whl

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install twine
          twine upload --skip-existing wheelhouse/*.whl